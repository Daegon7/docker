pipeline {
    agent any
    
    environment {
        NEXUS_HOST = 'host.docker.internal:8081'
        CREDENTIALS_ID = 'nexus-creds'
        APP_NAME = 'myapp'
    }
    
    triggers {
        pollSCM('H/1 * * * *')
    }
    
    stages {
        stage('📥 Checkout & Build') {
            steps {
                echo "🔄 Git 저장소에서 소스코드 가져오기..."
                git branch: 'master', url: 'https://github.com/Daegon7/docker.git'
                
                script {
                    env.GIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.IMAGE_TAG = "${BUILD_NUMBER}-${env.GIT_SHORT}"
                    echo "✅ 설정 완료: IMAGE_TAG = ${env.IMAGE_TAG}"
                }
                
                sh """
                    echo "🏗️ Docker 이미지 빌드..."
                    docker build -t ${APP_NAME}:${IMAGE_TAG} .
                    docker build -t ${APP_NAME}:latest .
                    
                    echo "📦 TAR 파일 생성..."
                    docker save ${APP_NAME}:${IMAGE_TAG} -o ${APP_NAME}-${IMAGE_TAG}.tar
                    docker save ${APP_NAME}:latest -o ${APP_NAME}-latest.tar
                    
                    echo "✅ 빌드 완료:"
                    ls -lh ${APP_NAME}-*.tar
                """
            }
        }
        
        stage('☁️ Upload to docker-hosted') {
            steps {
                echo "☁️ docker-hosted 저장소에 업로드 중..."
                withCredentials([usernamePassword(
                    credentialsId: "${CREDENTIALS_ID}",
                    usernameVariable: 'NEXUS_USER',
                    passwordVariable: 'NEXUS_PASS'
                )]) {
                    sh """
                        echo "=== Nexus 연결 테스트 ==="
                        curl -u \$NEXUS_USER:\$NEXUS_PASS -f "${NEXUS_HOST}/service/rest/v1/status" && echo "✅ 연결 성공"
                        
                        echo "=== docker-hosted 저장소에 업로드 ==="
                        
                        # Tagged 버전 업로드
                        echo "📤 ${IMAGE_TAG} 버전 업로드..."
                        curl -v -u \$NEXUS_USER:\$NEXUS_PASS \\
                             --upload-file ${APP_NAME}-${IMAGE_TAG}.tar \\
                             "${NEXUS_HOST}/repository/docker-hosted/docker-images/${APP_NAME}/${IMAGE_TAG}/${APP_NAME}-${IMAGE_TAG}.tar"
                        
                        # Latest 버전 업로드
                        echo "📤 latest 버전 업로드..."
                        curl -v -u \$NEXUS_USER:\$NEXUS_PASS \\
                             --upload-file ${APP_NAME}-latest.tar \\
                             "${NEXUS_HOST}/repository/docker-hosted/docker-images/${APP_NAME}/latest/${APP_NAME}-latest.tar"
                        
                        echo "✅ docker-hosted 업로드 완료!"
                    """
                }
            }
        }
        
        stage('✅ Verify Upload') {
            steps {
                echo "🔍 업로드 확인 중..."
                withCredentials([usernamePassword(
                    credentialsId: "${CREDENTIALS_ID}",
                    usernameVariable: 'NEXUS_USER',
                    passwordVariable: 'NEXUS_PASS'
                )]) {
                    sh """
                        echo "=== 업로드된 파일 확인 ==="
                        
                        # docker-hosted 저장소 내용 확인
                        echo "=== docker-hosted 저장소 내용 ==="
                        curl -s -u \$NEXUS_USER:\$NEXUS_PASS \\
                             "${NEXUS_HOST}/repository/docker-hosted/" | \\
                             grep -i "${APP_NAME}" || echo "파일 목록에서 ${APP_NAME} 검색 결과 없음"
                        
                        # 특정 파일 존재 확인
                        echo "=== 파일 존재 확인 ==="
                        
                        # Tagged 버전 확인
                        HTTP_CODE_TAG=\$(curl -s -o /dev/null -w "%{http_code}" \\
                                         -u \$NEXUS_USER:\$NEXUS_PASS \\
                                         "${NEXUS_HOST}/repository/docker-hosted/docker-images/${APP_NAME}/${IMAGE_TAG}/${APP_NAME}-${IMAGE_TAG}.tar")
                        
                        # Latest 버전 확인
                        HTTP_CODE_LATEST=\$(curl -s -o /dev/null -w "%{http_code}" \\
                                           -u \$NEXUS_USER:\$NEXUS_PASS \\
                                           "${NEXUS_HOST}/repository/docker-hosted/docker-images/${APP_NAME}/latest/${APP_NAME}-latest.tar")
                        
                        if [ "\$HTTP_CODE_TAG" = "200" ]; then
                            echo "✅ Tagged 버전 업로드 확인: ${APP_NAME}-${IMAGE_TAG}.tar"
                        else
                            echo "⚠️ Tagged 버전 확인 실패 (HTTP: \$HTTP_CODE_TAG)"
                        fi
                        
                        if [ "\$HTTP_CODE_LATEST" = "200" ]; then
                            echo "✅ Latest 버전 업로드 확인: ${APP_NAME}-latest.tar"
                        else
                            echo "⚠️ Latest 버전 확인 실패 (HTTP: \$HTTP_CODE_LATEST)"
                        fi
                        
                        echo "🔗 Nexus에서 확인: ${NEXUS_HOST}/#browse/browse:docker-hosted"
                    """
                }
            }
        }
        
        stage('📊 Summary') {
            steps {
                script {
                    echo """
                    🎉 빌드 및 업로드 완료!
                    
                    📦 프로젝트: ${APP_NAME}
                    🔢 빌드 번호: ${BUILD_NUMBER}
                    🏷️ 이미지 태그: ${env.IMAGE_TAG}
                    📁 저장소: docker-hosted
                    📅 빌드 시간: ${new Date()}
                    
                    🔗 Nexus 확인:
                    ${NEXUS_HOST}/#browse/browse:docker-hosted
                    
                    📁 업로드 경로:
                    - docker-images/${APP_NAME}/${env.IMAGE_TAG}/${APP_NAME}-${env.IMAGE_TAG}.tar
                    - docker-images/${APP_NAME}/latest/${APP_NAME}-latest.tar
                    
                    📥 이미지 다운로드 방법:
                    wget --user=admin --password=admin123 \\
                         "${NEXUS_HOST}/repository/docker-hosted/docker-images/${APP_NAME}/latest/${APP_NAME}-latest.tar"
                    
                    docker load -i ${APP_NAME}-latest.tar
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                try {
                    sh """
                        echo "🧹 정리 작업..."
                        rm -f ${APP_NAME}-*.tar || true
                        docker system prune -f || true
                        echo "✅ 정리 완료"
                    """
                } catch (Exception e) {
                    echo "⚠️ 정리 중 오류: ${e.getMessage()}"
                }
            }
        }
        
        success {
            echo """
            🎉 파이프라인 성공!
            
            ✅ Docker 이미지 빌드 완료
            ✅ docker-hosted 저장소에 업로드 완료
            
            📦 업로드된 파일:
            - ${APP_NAME}-${env.IMAGE_TAG}.tar
            - ${APP_NAME}-latest.tar
            
            🔗 확인: ${NEXUS_HOST}/#browse/browse:docker-hosted
            📁 경로: docker-images/${APP_NAME}/
            """
        }
        
        failure {
            echo """
            💥 파이프라인 실패!
            
            📋 확인사항:
            1. docker-hosted 저장소 상태
            2. Nexus 자격증명 (nexus-creds)
            3. 네트워크 연결 상태
            4. 파일 업로드 권한
            
            🔗 Nexus: ${NEXUS_HOST}/#browse/browse:docker-hosted
            """
        }
    }
}
